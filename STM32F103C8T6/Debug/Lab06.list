
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003144  08003144  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003144  08003144  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800314c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  080031bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080031bc  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af38  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea2  00000000  00000000  0002afd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002ce78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2c  00000000  00000000  0002e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4f7  00000000  00000000  0004626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008970c  00000000  00000000  00053763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dce6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000dcec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080030bc 	.word	0x080030bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080030bc 	.word	0x080030bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <MX_GPIO_Init+0x90>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1d      	ldr	r2, [pc, #116]	; (80001ec <MX_GPIO_Init+0x90>)
 8000176:	f043 0308 	orr.w	r3, r3, #8
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <MX_GPIO_Init+0x90>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0308 	and.w	r3, r3, #8
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <MX_GPIO_Init+0x90>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <MX_GPIO_Init+0x90>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b15      	ldr	r3, [pc, #84]	; (80001ec <MX_GPIO_Init+0x90>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a6:	4812      	ldr	r0, [pc, #72]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001a8:	f000 fe58 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80001ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001b2:	4b10      	ldr	r3, [pc, #64]	; (80001f4 <MX_GPIO_Init+0x98>)
 80001b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001b6:	2302      	movs	r3, #2
 80001b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ba:	f107 0308 	add.w	r3, r7, #8
 80001be:	4619      	mov	r1, r3
 80001c0:	480d      	ldr	r0, [pc, #52]	; (80001f8 <MX_GPIO_Init+0x9c>)
 80001c2:	f000 fcc7 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d4:	2302      	movs	r3, #2
 80001d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0308 	add.w	r3, r7, #8
 80001dc:	4619      	mov	r1, r3
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001e0:	f000 fcb8 	bl	8000b54 <HAL_GPIO_Init>

}
 80001e4:	bf00      	nop
 80001e6:	3718      	adds	r7, #24
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40010800 	.word	0x40010800
 80001f4:	10110000 	.word	0x10110000
 80001f8:	40010c00 	.word	0x40010c00

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fa64 	bl	80006cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f82a 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f7ff ffa8 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800020c:	f000 f9c2 	bl	8000594 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000210:	f000 f958 	bl	80004c4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000214:	f000 f85d 	bl	80002d2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	480b      	ldr	r0, [pc, #44]	; (8000248 <main+0x4c>)
 800021a:	f001 fab9 	bl	8001790 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(buffer, "Counter value: %d\n\r", counter);
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <main+0x50>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <main+0x54>)
 8000226:	480b      	ldr	r0, [pc, #44]	; (8000254 <main+0x58>)
 8000228:	f002 face 	bl	80027c8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)buffer, strlen(buffer));
 800022c:	4809      	ldr	r0, [pc, #36]	; (8000254 <main+0x58>)
 800022e:	f7ff ff8d 	bl	800014c <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29b      	uxth	r3, r3
 8000236:	461a      	mov	r2, r3
 8000238:	4906      	ldr	r1, [pc, #24]	; (8000254 <main+0x58>)
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <main+0x5c>)
 800023c:	f001 fe9f 	bl	8001f7e <HAL_UART_Transmit_IT>
		  HAL_Delay(200);
 8000240:	20c8      	movs	r0, #200	; 0xc8
 8000242:	f000 faa5 	bl	8000790 <HAL_Delay>
  {
 8000246:	e7ea      	b.n	800021e <main+0x22>
 8000248:	200000b4 	.word	0x200000b4
 800024c:	2000008c 	.word	0x2000008c
 8000250:	080030d4 	.word	0x080030d4
 8000254:	20000090 	.word	0x20000090
 8000258:	200000fc 	.word	0x200000fc

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 faa4 	bl	80027b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fe12 	bl	8000ebc <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029e:	f000 f869 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f880 	bl	80013c0 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c6:	f000 f855 	bl	8000374 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	2025      	movs	r0, #37	; 0x25
 80002dc:	f000 fb53 	bl	8000986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80002e0:	2025      	movs	r0, #37	; 0x25
 80002e2:	f000 fb6c 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2100      	movs	r1, #0
 80002ea:	201c      	movs	r0, #28
 80002ec:	f000 fb4b 	bl	8000986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80002f0:	201c      	movs	r0, #28
 80002f2:	f000 fb64 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	2028      	movs	r0, #40	; 0x28
 80002fc:	f000 fb43 	bl	8000986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000300:	2028      	movs	r0, #40	; 0x28
 8000302:	f000 fb5c 	bl	80009be <HAL_NVIC_EnableIRQ>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800031c:	d10c      	bne.n	8000338 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
    counter++;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000326:	6013      	str	r3, [r2, #0]
    if (counter >= 1000000)
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	dd02      	ble.n	8000338 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      counter = 0;
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	2000008c 	.word	0x2000008c
 8000348:	000f423f 	.word	0x000f423f

0800034c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800035c:	d102      	bne.n	8000364 <HAL_GPIO_EXTI_Callback+0x18>
	{
		counter = 0;
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <HAL_GPIO_EXTI_Callback+0x24>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
	}
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	2000008c 	.word	0x2000008c

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <HAL_MspInit+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <HAL_MspInit+0x40>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <HAL_MspInit+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HAL_MspInit+0x40>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <HAL_MspInit+0x40>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HAL_MspInit+0x40>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <NMI_Handler+0x4>

080003ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ce:	e7fe      	b.n	80003ce <HardFault_Handler+0x4>

080003d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <MemManage_Handler+0x4>

080003d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040a:	f000 f9a5 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <TIM2_IRQHandler+0x10>)
 800041a:	f001 fa0b 	bl	8001834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000b4 	.word	0x200000b4

08000428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <USART1_IRQHandler+0x10>)
 800042e:	f001 fdeb 	bl	8002008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000fc 	.word	0x200000fc

0800043c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000440:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000444:	f000 fd22 	bl	8000e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <_sbrk+0x5c>)
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <_sbrk+0x60>)
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <_sbrk+0x64>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d102      	bne.n	800046e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <_sbrk+0x64>)
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <_sbrk+0x68>)
 800046c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <_sbrk+0x64>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	429a      	cmp	r2, r3
 800047a:	d207      	bcs.n	800048c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800047c:	f002 f972 	bl	8002764 <__errno>
 8000480:	4603      	mov	r3, r0
 8000482:	220c      	movs	r2, #12
 8000484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e009      	b.n	80004a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <_sbrk+0x64>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <_sbrk+0x64>)
 800049c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20005000 	.word	0x20005000
 80004ac:	00000400 	.word	0x00000400
 80004b0:	200000b0 	.word	0x200000b0
 80004b4:	20000158 	.word	0x20000158

080004b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_TIM2_Init+0x94>)
 80004e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_TIM2_Init+0x94>)
 80004ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80004ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_TIM2_Init+0x94>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_TIM2_Init+0x94>)
 80004f8:	220a      	movs	r2, #10
 80004fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_TIM2_Init+0x94>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_TIM2_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <MX_TIM2_Init+0x94>)
 800050a:	f001 f8f1 	bl	80016f0 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000514:	f7ff ff2e 	bl	8000374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	4619      	mov	r1, r3
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_TIM2_Init+0x94>)
 8000526:	f001 fa8d 	bl	8001a44 <HAL_TIM_ConfigClockSource>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000530:	f7ff ff20 	bl	8000374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_TIM2_Init+0x94>)
 8000542:	f001 fc5f 	bl	8001e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800054c:	f7ff ff12 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000b4 	.word	0x200000b4

0800055c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800056c:	d10b      	bne.n	8000586 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000

08000594 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <MX_USART1_UART_Init+0x50>)
 800059c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_USART1_UART_Init+0x4c>)
 80005cc:	f001 fc8a 	bl	8001ee4 <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005d6:	f7ff fecd 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	40013800 	.word	0x40013800

080005e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <HAL_UART_MspInit+0x8c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d131      	bne.n	800066c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <HAL_UART_MspInit+0x90>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_UART_MspInit+0x90>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <HAL_UART_MspInit+0x94>)
 800064e:	f000 fa81 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <HAL_UART_MspInit+0x94>)
 8000668:	f000 fa74 	bl	8000b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40013800 	.word	0x40013800
 8000678:	40021000 	.word	0x40021000
 800067c:	40010800 	.word	0x40010800

08000680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	; (80006b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	; (80006c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006a6:	f7ff ff07 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 f861 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fda5 	bl	80001fc <main>
  bx lr
 80006b2:	4770      	bx	lr
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006bc:	0800314c 	.word	0x0800314c
  ldr r2, =_sbss
 80006c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006c4:	20000154 	.word	0x20000154

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f947 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff fe4a 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f95f 	bl	80009da <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f927 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000008 	.word	0x20000008
 8000778:	20000140 	.word	0x20000140

0800077c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000140 	.word	0x20000140

08000790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff fff0 	bl	800077c <HAL_GetTick>
 800079c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d005      	beq.n	80007b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_Delay+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007b6:	bf00      	nop
 80007b8:	f7ff ffe0 	bl	800077c <HAL_GetTick>
 80007bc:	4602      	mov	r2, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f7      	bhi.n	80007b8 <HAL_Delay+0x28>
  {
  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000008 	.word	0x20000008

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <__NVIC_EnableIRQ+0x34>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff2d 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff42 	bl	8000820 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff35 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa2 	bl	800092c <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d008      	beq.n	8000a1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e020      	b.n	8000a5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020e 	bic.w	r2, r2, #14
 8000a28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a42:	2101      	movs	r1, #1
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d005      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2204      	movs	r2, #4
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e051      	b.n	8000b2e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 020e 	bic.w	r2, r2, #14
 8000a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0201 	bic.w	r2, r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_DMA_Abort_IT+0xd0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d029      	beq.n	8000b08 <HAL_DMA_Abort_IT+0xa0>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <HAL_DMA_Abort_IT+0xd4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d022      	beq.n	8000b04 <HAL_DMA_Abort_IT+0x9c>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_DMA_Abort_IT+0xd8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d01a      	beq.n	8000afe <HAL_DMA_Abort_IT+0x96>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_DMA_Abort_IT+0xdc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d012      	beq.n	8000af8 <HAL_DMA_Abort_IT+0x90>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_DMA_Abort_IT+0xe0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00a      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x8a>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_DMA_Abort_IT+0xe4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d102      	bne.n	8000aec <HAL_DMA_Abort_IT+0x84>
 8000ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aea:	e00e      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000af0:	e00b      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af6:	e008      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	e005      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	e002      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000b04:	2310      	movs	r3, #16
 8000b06:	e000      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_DMA_Abort_IT+0xe8>)
 8000b0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
    } 
  }
  return status;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40020008 	.word	0x40020008
 8000b3c:	4002001c 	.word	0x4002001c
 8000b40:	40020030 	.word	0x40020030
 8000b44:	40020044 	.word	0x40020044
 8000b48:	40020058 	.word	0x40020058
 8000b4c:	4002006c 	.word	0x4002006c
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e169      	b.n	8000e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8158 	bne.w	8000e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a9a      	ldr	r2, [pc, #616]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d05e      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b90:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d875      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000b96:	4a98      	ldr	r2, [pc, #608]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d058      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b9c:	4a96      	ldr	r2, [pc, #600]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d86f      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a96      	ldr	r2, [pc, #600]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d052      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000ba8:	4a94      	ldr	r2, [pc, #592]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d869      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bae:	4a94      	ldr	r2, [pc, #592]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d04c      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bb4:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d863      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bba:	4a92      	ldr	r2, [pc, #584]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d046      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a90      	ldr	r2, [pc, #576]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d85d      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d82a      	bhi.n	8000c20 <HAL_GPIO_Init+0xcc>
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d859      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <HAL_GPIO_Init+0x80>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c29 	.word	0x08000c29
 8000bdc:	08000c3b 	.word	0x08000c3b
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000c83 	.word	0x08000c83
 8000bf0:	08000c83 	.word	0x08000c83
 8000bf4:	08000c83 	.word	0x08000c83
 8000bf8:	08000c83 	.word	0x08000c83
 8000bfc:	08000c83 	.word	0x08000c83
 8000c00:	08000c83 	.word	0x08000c83
 8000c04:	08000c83 	.word	0x08000c83
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c83 	.word	0x08000c83
 8000c10:	08000c83 	.word	0x08000c83
 8000c14:	08000c83 	.word	0x08000c83
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c45 	.word	0x08000c45
 8000c20:	4a79      	ldr	r2, [pc, #484]	; (8000e08 <HAL_GPIO_Init+0x2b4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c26:	e02c      	b.n	8000c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e029      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	3304      	adds	r3, #4
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e024      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e01f      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	330c      	adds	r3, #12
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e01a      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c56:	2304      	movs	r3, #4
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e013      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	611a      	str	r2, [r3, #16]
          break;
 8000c6e:	e009      	b.n	8000c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	615a      	str	r2, [r3, #20]
          break;
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          break;
 8000c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	; 0xff
 8000c88:	d801      	bhi.n	8000c8e <HAL_GPIO_Init+0x13a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	e001      	b.n	8000c92 <HAL_GPIO_Init+0x13e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3304      	adds	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d802      	bhi.n	8000ca0 <HAL_GPIO_Init+0x14c>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x152>
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	3b08      	subs	r3, #8
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	210f      	movs	r1, #15
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	6a39      	ldr	r1, [r7, #32]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80b1 	beq.w	8000e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cec:	4a48      	ldr	r2, [pc, #288]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3f      	ldr	r2, [pc, #252]	; (8000e18 <HAL_GPIO_Init+0x2c4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x1e8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <HAL_GPIO_Init+0x2c8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x1e4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x1e0>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e004      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d40:	2300      	movs	r3, #0
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d52:	492f      	ldr	r1, [pc, #188]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	492c      	ldr	r1, [pc, #176]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4928      	ldr	r1, [pc, #160]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4922      	ldr	r1, [pc, #136]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	491e      	ldr	r1, [pc, #120]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	4918      	ldr	r1, [pc, #96]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4914      	ldr	r1, [pc, #80]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d021      	beq.n	8000e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	490e      	ldr	r1, [pc, #56]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60cb      	str	r3, [r1, #12]
 8000df0:	e021      	b.n	8000e36 <HAL_GPIO_Init+0x2e2>
 8000df2:	bf00      	nop
 8000df4:	10320000 	.word	0x10320000
 8000df8:	10310000 	.word	0x10310000
 8000dfc:	10220000 	.word	0x10220000
 8000e00:	10210000 	.word	0x10210000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40011400 	.word	0x40011400
 8000e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	4909      	ldr	r1, [pc, #36]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3301      	adds	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f47f ae8e 	bne.w	8000b68 <HAL_GPIO_Init+0x14>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	372c      	adds	r7, #44	; 0x2c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fa4e 	bl	800034c <HAL_GPIO_EXTI_Callback>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e272      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 8087 	beq.w	8000fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000edc:	4b92      	ldr	r3, [pc, #584]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d00c      	beq.n	8000f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee8:	4b8f      	ldr	r3, [pc, #572]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d112      	bne.n	8000f1a <HAL_RCC_OscConfig+0x5e>
 8000ef4:	4b8c      	ldr	r3, [pc, #560]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d10b      	bne.n	8000f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f02:	4b89      	ldr	r3, [pc, #548]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d06c      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x12c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d168      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e24c      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f22:	d106      	bne.n	8000f32 <HAL_RCC_OscConfig+0x76>
 8000f24:	4b80      	ldr	r3, [pc, #512]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a7f      	ldr	r2, [pc, #508]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e02e      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x98>
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a7a      	ldr	r2, [pc, #488]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b78      	ldr	r3, [pc, #480]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a77      	ldr	r2, [pc, #476]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e01d      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0xbc>
 8000f5e:	4b72      	ldr	r3, [pc, #456]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a71      	ldr	r2, [pc, #452]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6e      	ldr	r2, [pc, #440]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a6a      	ldr	r2, [pc, #424]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a67      	ldr	r2, [pc, #412]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fbf0 	bl	800077c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fbec 	bl	800077c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e200      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe4>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fbdc 	bl	800077c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fbd8 	bl	800077c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1ec      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x10c>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d063      	beq.n	80010be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	d11c      	bne.n	8001048 <HAL_RCC_OscConfig+0x18c>
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1c0      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4939      	ldr	r1, [pc, #228]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	e03a      	b.n	80010be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_RCC_OscConfig+0x270>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb91 	bl	800077c <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fb8d 	bl	800077c <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1a1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4927      	ldr	r1, [pc, #156]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e015      	b.n	80010be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_RCC_OscConfig+0x270>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fb70 	bl	800077c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fb6c 	bl	800077c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e180      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d03a      	beq.n	8001140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d019      	beq.n	8001106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_RCC_OscConfig+0x274>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb50 	bl	800077c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb4c 	bl	800077c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e160      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 fad8 	bl	80016b4 <RCC_Delay>
 8001104:	e01c      	b.n	8001140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_RCC_OscConfig+0x274>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110c:	f7ff fb36 	bl	800077c <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001112:	e00f      	b.n	8001134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff fb32 	bl	800077c <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d908      	bls.n	8001134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e146      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	42420000 	.word	0x42420000
 8001130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	4b92      	ldr	r3, [pc, #584]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e9      	bne.n	8001114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a6 	beq.w	800129a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b85      	ldr	r3, [pc, #532]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a7e      	ldr	r2, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff faf3 	bl	800077c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff faef 	bl	800077c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b64      	cmp	r3, #100	; 0x64
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e103      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b75      	ldr	r3, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x312>
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e02d      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x334>
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a69      	ldr	r2, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	e01c      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d10c      	bne.n	8001212 <HAL_RCC_OscConfig+0x356>
 80011f8:	4b61      	ldr	r3, [pc, #388]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	e00b      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d015      	beq.n	800125e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff faa3 	bl	800077c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fa9f 	bl	800077c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0b1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0ee      	beq.n	800123a <HAL_RCC_OscConfig+0x37e>
 800125c:	e014      	b.n	8001288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fa8d 	bl	800077c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff fa89 	bl	800077c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e09b      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ee      	bne.n	8001266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d105      	bne.n	800129a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d061      	beq.n	8001374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d146      	bne.n	8001346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fa5d 	bl	800077c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff fa59 	bl	800077c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e06d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d108      	bne.n	8001300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4921      	ldr	r1, [pc, #132]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a19      	ldr	r1, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	430b      	orrs	r3, r1
 8001312:	491b      	ldr	r1, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fa2d 	bl	800077c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fa29 	bl	800077c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e03d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x46a>
 8001344:	e035      	b.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fa16 	bl	800077c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fa12 	bl	800077c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e026      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x498>
 8001372:	e01e      	b.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e019      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
 8001380:	40021000 	.word	0x40021000
 8001384:	40007000 	.word	0x40007000
 8001388:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x500>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	429a      	cmp	r2, r3
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d0      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d910      	bls.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4965      	ldr	r1, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800143e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d040      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d115      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e073      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06b      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f023 0203 	bic.w	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4936      	ldr	r1, [pc, #216]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b0:	f7ff f964 	bl	800077c <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7ff f960 	bl	800077c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e053      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 020c 	and.w	r2, r3, #12
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1eb      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d210      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1cc>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f8c2 	bl	80006f8 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	080030f8 	.word	0x080030f8
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b490      	push	{r4, r7}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_RCC_GetSysClockFreq+0xac>)
 800159c:	1d3c      	adds	r4, r7, #4
 800159e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a4:	f240 2301 	movw	r3, #513	; 0x201
 80015a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x40>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x46>
 80015d2:	e02b      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015d6:	623b      	str	r3, [r7, #32]
      break;
 80015d8:	e02b      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3328      	adds	r3, #40	; 0x28
 80015e4:	443b      	add	r3, r7
 80015e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d012      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0c5b      	lsrs	r3, r3, #17
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	443b      	add	r3, r7
 8001604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001608:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160e:	fb03 f202 	mul.w	r2, r3, r2
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	e004      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	623b      	str	r3, [r7, #32]
      break;
 800162a:	e002      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 800162e:	623b      	str	r3, [r7, #32]
      break;
 8001630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001632:	6a3b      	ldr	r3, [r7, #32]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bc90      	pop	{r4, r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	080030e8 	.word	0x080030e8
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	003d0900 	.word	0x003d0900

08001650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_RCC_GetHCLKFreq+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000000 	.word	0x20000000

08001664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001668:	f7ff fff2 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	08003108 	.word	0x08003108

0800168c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001690:	f7ff ffde 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0adb      	lsrs	r3, r3, #11
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	4903      	ldr	r1, [pc, #12]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08003108 	.word	0x08003108

080016b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <RCC_Delay+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <RCC_Delay+0x38>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a5b      	lsrs	r3, r3, #9
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d0:	bf00      	nop
  }
  while (Delay --);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <RCC_Delay+0x1c>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000000 	.word	0x20000000
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e041      	b.n	8001786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff20 	bl	800055c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f000 fa70 	bl	8001c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d001      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e03a      	b.n	800181e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_TIM_Base_Start_IT+0x98>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00e      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x58>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d009      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x58>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_TIM_Base_Start_IT+0x9c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x58>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_TIM_Base_Start_IT+0xa0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d111      	bne.n	800180c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d010      	beq.n	800181c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800180a:	e007      	b.n	800181c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40000400 	.word	0x40000400
 8001830:	40000800 	.word	0x40000800

08001834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b02      	cmp	r3, #2
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0202 	mvn.w	r2, #2
 8001860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f9b1 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f9a4 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f9b3 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b04      	cmp	r3, #4
 800189c:	d122      	bne.n	80018e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d11b      	bne.n	80018e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0204 	mvn.w	r2, #4
 80018b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2202      	movs	r2, #2
 80018ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f987 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 80018d0:	e005      	b.n	80018de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f97a 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f989 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d122      	bne.n	8001938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d11b      	bne.n	8001938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0208 	mvn.w	r2, #8
 8001908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f95d 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f950 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f95f 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b10      	cmp	r3, #16
 8001944:	d122      	bne.n	800198c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b10      	cmp	r3, #16
 8001952:	d11b      	bne.n	800198c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0210 	mvn.w	r2, #16
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2208      	movs	r2, #8
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f933 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f926 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f935 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b01      	cmp	r3, #1
 8001998:	d10e      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0201 	mvn.w	r2, #1
 80019b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fcaa 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	2b80      	cmp	r3, #128	; 0x80
 80019c4:	d10e      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d107      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fa77 	bl	8001ed2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d107      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8f9 	bl	8001c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0220 	mvn.w	r2, #32
 8001a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa42 	bl	8001ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_TIM_ConfigClockSource+0x18>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0b3      	b.n	8001bc4 <HAL_TIM_ConfigClockSource+0x180>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	d03e      	beq.n	8001b14 <HAL_TIM_ConfigClockSource+0xd0>
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9a:	f200 8087 	bhi.w	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	f000 8085 	beq.w	8001bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aaa:	d87f      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001aac:	2b70      	cmp	r3, #112	; 0x70
 8001aae:	d01a      	beq.n	8001ae6 <HAL_TIM_ConfigClockSource+0xa2>
 8001ab0:	2b70      	cmp	r3, #112	; 0x70
 8001ab2:	d87b      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001ab4:	2b60      	cmp	r3, #96	; 0x60
 8001ab6:	d050      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x116>
 8001ab8:	2b60      	cmp	r3, #96	; 0x60
 8001aba:	d877      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001abc:	2b50      	cmp	r3, #80	; 0x50
 8001abe:	d03c      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0xf6>
 8001ac0:	2b50      	cmp	r3, #80	; 0x50
 8001ac2:	d873      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d058      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x136>
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d86f      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001acc:	2b30      	cmp	r3, #48	; 0x30
 8001ace:	d064      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x156>
 8001ad0:	2b30      	cmp	r3, #48	; 0x30
 8001ad2:	d86b      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d060      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x156>
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d867      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05c      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x156>
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d05a      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ae4:	e062      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f000 f966 	bl	8001dc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	609a      	str	r2, [r3, #8]
      break;
 8001b12:	e04e      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f000 f94f 	bl	8001dc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b36:	609a      	str	r2, [r3, #8]
      break;
 8001b38:	e03b      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f000 f8c6 	bl	8001cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2150      	movs	r1, #80	; 0x50
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f91d 	bl	8001d92 <TIM_ITRx_SetConfig>
      break;
 8001b58:	e02b      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f000 f8e4 	bl	8001d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2160      	movs	r1, #96	; 0x60
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f90d 	bl	8001d92 <TIM_ITRx_SetConfig>
      break;
 8001b78:	e01b      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f000 f8a6 	bl	8001cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f8fd 	bl	8001d92 <TIM_ITRx_SetConfig>
      break;
 8001b98:	e00b      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 f8f4 	bl	8001d92 <TIM_ITRx_SetConfig>
        break;
 8001baa:	e002      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001bac:	bf00      	nop
 8001bae:	e000      	b.n	8001bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001bb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <TIM_Base_SetConfig+0xb8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00b      	beq.n	8001c44 <TIM_Base_SetConfig+0x30>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c32:	d007      	beq.n	8001c44 <TIM_Base_SetConfig+0x30>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <TIM_Base_SetConfig+0xbc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <TIM_Base_SetConfig+0x30>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <TIM_Base_SetConfig+0xc0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <TIM_Base_SetConfig+0xb8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00b      	beq.n	8001c76 <TIM_Base_SetConfig+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d007      	beq.n	8001c76 <TIM_Base_SetConfig+0x62>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <TIM_Base_SetConfig+0xbc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d003      	beq.n	8001c76 <TIM_Base_SetConfig+0x62>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <TIM_Base_SetConfig+0xc0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d108      	bne.n	8001c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <TIM_Base_SetConfig+0xb8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	615a      	str	r2, [r3, #20]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800

08001cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f023 0201 	bic.w	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f023 030a 	bic.w	r3, r3, #10
 8001d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	621a      	str	r2, [r3, #32]
}
 8001d2a:	bf00      	nop
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f023 0210 	bic.w	r2, r3, #16
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	621a      	str	r2, [r3, #32]
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f043 0307 	orr.w	r3, r3, #7
 8001db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b087      	sub	sp, #28
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	021a      	lsls	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	609a      	str	r2, [r3, #8]
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e046      	b.n	8001eaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d009      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10c      	bne.n	8001e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	40012c00 	.word	0x40012c00
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800

08001ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e03f      	b.n	8001f76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fb6c 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2224      	movs	r2, #36	; 0x24
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb8d 	bl	8002648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d130      	bne.n	8001ffa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_UART_Transmit_IT+0x26>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e029      	b.n	8001ffc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Transmit_IT+0x38>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e022      	b.n	8001ffc <HAL_UART_Transmit_IT+0x7e>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2221      	movs	r2, #33	; 0x21
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
  }
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_UART_IRQHandler+0x52>
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa4f 	bl	80024f6 <UART_Receive_IT>
      return;
 8002058:	e17b      	b.n	8002352 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80b1 	beq.w	80021c4 <HAL_UART_IRQHandler+0x1bc>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_UART_IRQHandler+0x70>
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a6 	beq.w	80021c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_UART_IRQHandler+0x90>
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_UART_IRQHandler+0xb0>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_UART_IRQHandler+0xd0>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00f      	beq.n	8002102 <HAL_UART_IRQHandler+0xfa>
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <HAL_UART_IRQHandler+0xee>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0208 	orr.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 811e 	beq.w	8002348 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_UART_IRQHandler+0x11e>
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f9e8 	bl	80024f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_UART_IRQHandler+0x146>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d031      	beq.n	80021b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f92a 	bl	80023a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d023      	beq.n	80021aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002170:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	2b00      	cmp	r3, #0
 8002178:	d013      	beq.n	80021a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	4a76      	ldr	r2, [pc, #472]	; (8002358 <HAL_UART_IRQHandler+0x350>)
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fc6e 	bl	8000a68 <HAL_DMA_Abort_IT>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219c:	4610      	mov	r0, r2
 800219e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a0:	e00e      	b.n	80021c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ec 	bl	8002380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	e00a      	b.n	80021c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8e8 	bl	8002380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	e006      	b.n	80021c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8e4 	bl	8002380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021be:	e0c3      	b.n	8002348 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c0:	bf00      	nop
    return;
 80021c2:	e0c1      	b.n	8002348 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f040 80a1 	bne.w	8002310 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 809b 	beq.w	8002310 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8095 	beq.w	8002310 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d04e      	beq.n	80022a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002214:	8a3b      	ldrh	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8098 	beq.w	800234c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002220:	8a3a      	ldrh	r2, [r7, #16]
 8002222:	429a      	cmp	r2, r3
 8002224:	f080 8092 	bcs.w	800234c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8a3a      	ldrh	r2, [r7, #16]
 800222c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b20      	cmp	r3, #32
 8002236:	d02b      	beq.n	8002290 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002246:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002266:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0210 	bic.w	r2, r2, #16
 8002284:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fbb1 	bl	80009f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002298:	b29b      	uxth	r3, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	b29b      	uxth	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f876 	bl	8002392 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80022a6:	e051      	b.n	800234c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d047      	beq.n	8002350 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80022c0:	8a7b      	ldrh	r3, [r7, #18]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0210 	bic.w	r2, r2, #16
 8002302:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002304:	8a7b      	ldrh	r3, [r7, #18]
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f842 	bl	8002392 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800230e:	e01f      	b.n	8002350 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_UART_IRQHandler+0x324>
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f87f 	bl	8002428 <UART_Transmit_IT>
    return;
 800232a:	e012      	b.n	8002352 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_UART_IRQHandler+0x34a>
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8c0 	bl	80024c6 <UART_EndTransmit_IT>
    return;
 8002346:	e004      	b.n	8002352 <HAL_UART_IRQHandler+0x34a>
    return;
 8002348:	bf00      	nop
 800234a:	e002      	b.n	8002352 <HAL_UART_IRQHandler+0x34a>
      return;
 800234c:	bf00      	nop
 800234e:	e000      	b.n	8002352 <HAL_UART_IRQHandler+0x34a>
      return;
 8002350:	bf00      	nop
  }
}
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	08002401 	.word	0x08002401

0800235c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0210 	bic.w	r2, r2, #16
 80023e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff ffb0 	bl	8002380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b21      	cmp	r3, #33	; 0x21
 800243a:	d13e      	bne.n	80024ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002444:	d114      	bne.n	8002470 <UART_Transmit_IT+0x48>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d110      	bne.n	8002470 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002462:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	1c9a      	adds	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	621a      	str	r2, [r3, #32]
 800246e:	e008      	b.n	8002482 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	1c59      	adds	r1, r3, #1
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6211      	str	r1, [r2, #32]
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4619      	mov	r1, r3
 8002490:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff38 	bl	800235c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b22      	cmp	r3, #34	; 0x22
 8002508:	f040 8099 	bne.w	800263e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002514:	d117      	bne.n	8002546 <UART_Receive_IT+0x50>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d113      	bne.n	8002546 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	b29a      	uxth	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	1c9a      	adds	r2, r3, #2
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
 8002544:	e026      	b.n	8002594 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d007      	beq.n	800256a <UART_Receive_IT+0x74>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <UART_Receive_IT+0x82>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e008      	b.n	800258a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	b2da      	uxtb	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d148      	bne.n	800263a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0220 	bic.w	r2, r2, #32
 80025b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d123      	bne.n	8002630 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0210 	bic.w	r2, r2, #16
 80025fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b10      	cmp	r3, #16
 800260a:	d10a      	bne.n	8002622 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff feb2 	bl	8002392 <HAL_UARTEx_RxEventCallback>
 800262e:	e002      	b.n	8002636 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fe9c 	bl	800236e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e002      	b.n	8002640 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002682:	f023 030c 	bic.w	r3, r3, #12
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	430b      	orrs	r3, r1
 800268e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2c      	ldr	r2, [pc, #176]	; (800275c <UART_SetConfig+0x114>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b0:	f7fe ffec 	bl	800168c <HAL_RCC_GetPCLK2Freq>
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	e002      	b.n	80026be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026b8:	f7fe ffd4 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <UART_SetConfig+0x118>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	0119      	lsls	r1, r3, #4
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009a      	lsls	r2, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <UART_SetConfig+0x118>)
 80026f6:	fba3 0302 	umull	r0, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2064      	movs	r0, #100	; 0x64
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	3332      	adds	r3, #50	; 0x32
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <UART_SetConfig+0x118>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002714:	4419      	add	r1, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009a      	lsls	r2, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fbb2 f2f3 	udiv	r2, r2, r3
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <UART_SetConfig+0x118>)
 800272e:	fba3 0302 	umull	r0, r3, r3, r2
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2064      	movs	r0, #100	; 0x64
 8002736:	fb00 f303 	mul.w	r3, r0, r3
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	3332      	adds	r3, #50	; 0x32
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <UART_SetConfig+0x118>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	440a      	add	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40013800 	.word	0x40013800
 8002760:	51eb851f 	.word	0x51eb851f

08002764 <__errno>:
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <__errno+0x8>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000000c 	.word	0x2000000c

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	2600      	movs	r6, #0
 8002774:	4d0c      	ldr	r5, [pc, #48]	; (80027a8 <__libc_init_array+0x38>)
 8002776:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	f000 fc9c 	bl	80030bc <_init>
 8002784:	2600      	movs	r6, #0
 8002786:	4d0a      	ldr	r5, [pc, #40]	; (80027b0 <__libc_init_array+0x40>)
 8002788:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <__libc_init_array+0x44>)
 800278a:	1b64      	subs	r4, r4, r5
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	f855 3b04 	ldr.w	r3, [r5], #4
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08003144 	.word	0x08003144
 80027ac:	08003144 	.word	0x08003144
 80027b0:	08003144 	.word	0x08003144
 80027b4:	08003148 	.word	0x08003148

080027b8 <memset>:
 80027b8:	4603      	mov	r3, r0
 80027ba:	4402      	add	r2, r0
 80027bc:	4293      	cmp	r3, r2
 80027be:	d100      	bne.n	80027c2 <memset+0xa>
 80027c0:	4770      	bx	lr
 80027c2:	f803 1b01 	strb.w	r1, [r3], #1
 80027c6:	e7f9      	b.n	80027bc <memset+0x4>

080027c8 <siprintf>:
 80027c8:	b40e      	push	{r1, r2, r3}
 80027ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027ce:	b500      	push	{lr}
 80027d0:	b09c      	sub	sp, #112	; 0x70
 80027d2:	ab1d      	add	r3, sp, #116	; 0x74
 80027d4:	9002      	str	r0, [sp, #8]
 80027d6:	9006      	str	r0, [sp, #24]
 80027d8:	9107      	str	r1, [sp, #28]
 80027da:	9104      	str	r1, [sp, #16]
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <siprintf+0x38>)
 80027de:	4909      	ldr	r1, [pc, #36]	; (8002804 <siprintf+0x3c>)
 80027e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e4:	9105      	str	r1, [sp, #20]
 80027e6:	6800      	ldr	r0, [r0, #0]
 80027e8:	a902      	add	r1, sp, #8
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	f000 f868 	bl	80028c0 <_svfiprintf_r>
 80027f0:	2200      	movs	r2, #0
 80027f2:	9b02      	ldr	r3, [sp, #8]
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	b01c      	add	sp, #112	; 0x70
 80027f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027fc:	b003      	add	sp, #12
 80027fe:	4770      	bx	lr
 8002800:	2000000c 	.word	0x2000000c
 8002804:	ffff0208 	.word	0xffff0208

08002808 <__ssputs_r>:
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	688e      	ldr	r6, [r1, #8]
 800280e:	4682      	mov	sl, r0
 8002810:	429e      	cmp	r6, r3
 8002812:	460c      	mov	r4, r1
 8002814:	4690      	mov	r8, r2
 8002816:	461f      	mov	r7, r3
 8002818:	d838      	bhi.n	800288c <__ssputs_r+0x84>
 800281a:	898a      	ldrh	r2, [r1, #12]
 800281c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002820:	d032      	beq.n	8002888 <__ssputs_r+0x80>
 8002822:	6825      	ldr	r5, [r4, #0]
 8002824:	6909      	ldr	r1, [r1, #16]
 8002826:	3301      	adds	r3, #1
 8002828:	eba5 0901 	sub.w	r9, r5, r1
 800282c:	6965      	ldr	r5, [r4, #20]
 800282e:	444b      	add	r3, r9
 8002830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002838:	106d      	asrs	r5, r5, #1
 800283a:	429d      	cmp	r5, r3
 800283c:	bf38      	it	cc
 800283e:	461d      	movcc	r5, r3
 8002840:	0553      	lsls	r3, r2, #21
 8002842:	d531      	bpl.n	80028a8 <__ssputs_r+0xa0>
 8002844:	4629      	mov	r1, r5
 8002846:	f000 fb6f 	bl	8002f28 <_malloc_r>
 800284a:	4606      	mov	r6, r0
 800284c:	b950      	cbnz	r0, 8002864 <__ssputs_r+0x5c>
 800284e:	230c      	movs	r3, #12
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f8ca 3000 	str.w	r3, [sl]
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285e:	81a3      	strh	r3, [r4, #12]
 8002860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002864:	464a      	mov	r2, r9
 8002866:	6921      	ldr	r1, [r4, #16]
 8002868:	f000 face 	bl	8002e08 <memcpy>
 800286c:	89a3      	ldrh	r3, [r4, #12]
 800286e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002876:	81a3      	strh	r3, [r4, #12]
 8002878:	6126      	str	r6, [r4, #16]
 800287a:	444e      	add	r6, r9
 800287c:	6026      	str	r6, [r4, #0]
 800287e:	463e      	mov	r6, r7
 8002880:	6165      	str	r5, [r4, #20]
 8002882:	eba5 0509 	sub.w	r5, r5, r9
 8002886:	60a5      	str	r5, [r4, #8]
 8002888:	42be      	cmp	r6, r7
 800288a:	d900      	bls.n	800288e <__ssputs_r+0x86>
 800288c:	463e      	mov	r6, r7
 800288e:	4632      	mov	r2, r6
 8002890:	4641      	mov	r1, r8
 8002892:	6820      	ldr	r0, [r4, #0]
 8002894:	f000 fac6 	bl	8002e24 <memmove>
 8002898:	68a3      	ldr	r3, [r4, #8]
 800289a:	2000      	movs	r0, #0
 800289c:	1b9b      	subs	r3, r3, r6
 800289e:	60a3      	str	r3, [r4, #8]
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	4433      	add	r3, r6
 80028a4:	6023      	str	r3, [r4, #0]
 80028a6:	e7db      	b.n	8002860 <__ssputs_r+0x58>
 80028a8:	462a      	mov	r2, r5
 80028aa:	f000 fbb1 	bl	8003010 <_realloc_r>
 80028ae:	4606      	mov	r6, r0
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d1e1      	bne.n	8002878 <__ssputs_r+0x70>
 80028b4:	4650      	mov	r0, sl
 80028b6:	6921      	ldr	r1, [r4, #16]
 80028b8:	f000 face 	bl	8002e58 <_free_r>
 80028bc:	e7c7      	b.n	800284e <__ssputs_r+0x46>
	...

080028c0 <_svfiprintf_r>:
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	4698      	mov	r8, r3
 80028c6:	898b      	ldrh	r3, [r1, #12]
 80028c8:	4607      	mov	r7, r0
 80028ca:	061b      	lsls	r3, r3, #24
 80028cc:	460d      	mov	r5, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	b09d      	sub	sp, #116	; 0x74
 80028d2:	d50e      	bpl.n	80028f2 <_svfiprintf_r+0x32>
 80028d4:	690b      	ldr	r3, [r1, #16]
 80028d6:	b963      	cbnz	r3, 80028f2 <_svfiprintf_r+0x32>
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	f000 fb25 	bl	8002f28 <_malloc_r>
 80028de:	6028      	str	r0, [r5, #0]
 80028e0:	6128      	str	r0, [r5, #16]
 80028e2:	b920      	cbnz	r0, 80028ee <_svfiprintf_r+0x2e>
 80028e4:	230c      	movs	r3, #12
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	e0d1      	b.n	8002a92 <_svfiprintf_r+0x1d2>
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	616b      	str	r3, [r5, #20]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9309      	str	r3, [sp, #36]	; 0x24
 80028f6:	2320      	movs	r3, #32
 80028f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028fc:	2330      	movs	r3, #48	; 0x30
 80028fe:	f04f 0901 	mov.w	r9, #1
 8002902:	f8cd 800c 	str.w	r8, [sp, #12]
 8002906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002aac <_svfiprintf_r+0x1ec>
 800290a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800290e:	4623      	mov	r3, r4
 8002910:	469a      	mov	sl, r3
 8002912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002916:	b10a      	cbz	r2, 800291c <_svfiprintf_r+0x5c>
 8002918:	2a25      	cmp	r2, #37	; 0x25
 800291a:	d1f9      	bne.n	8002910 <_svfiprintf_r+0x50>
 800291c:	ebba 0b04 	subs.w	fp, sl, r4
 8002920:	d00b      	beq.n	800293a <_svfiprintf_r+0x7a>
 8002922:	465b      	mov	r3, fp
 8002924:	4622      	mov	r2, r4
 8002926:	4629      	mov	r1, r5
 8002928:	4638      	mov	r0, r7
 800292a:	f7ff ff6d 	bl	8002808 <__ssputs_r>
 800292e:	3001      	adds	r0, #1
 8002930:	f000 80aa 	beq.w	8002a88 <_svfiprintf_r+0x1c8>
 8002934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002936:	445a      	add	r2, fp
 8002938:	9209      	str	r2, [sp, #36]	; 0x24
 800293a:	f89a 3000 	ldrb.w	r3, [sl]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80a2 	beq.w	8002a88 <_svfiprintf_r+0x1c8>
 8002944:	2300      	movs	r3, #0
 8002946:	f04f 32ff 	mov.w	r2, #4294967295
 800294a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800294e:	f10a 0a01 	add.w	sl, sl, #1
 8002952:	9304      	str	r3, [sp, #16]
 8002954:	9307      	str	r3, [sp, #28]
 8002956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800295a:	931a      	str	r3, [sp, #104]	; 0x68
 800295c:	4654      	mov	r4, sl
 800295e:	2205      	movs	r2, #5
 8002960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002964:	4851      	ldr	r0, [pc, #324]	; (8002aac <_svfiprintf_r+0x1ec>)
 8002966:	f000 fa41 	bl	8002dec <memchr>
 800296a:	9a04      	ldr	r2, [sp, #16]
 800296c:	b9d8      	cbnz	r0, 80029a6 <_svfiprintf_r+0xe6>
 800296e:	06d0      	lsls	r0, r2, #27
 8002970:	bf44      	itt	mi
 8002972:	2320      	movmi	r3, #32
 8002974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002978:	0711      	lsls	r1, r2, #28
 800297a:	bf44      	itt	mi
 800297c:	232b      	movmi	r3, #43	; 0x2b
 800297e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002982:	f89a 3000 	ldrb.w	r3, [sl]
 8002986:	2b2a      	cmp	r3, #42	; 0x2a
 8002988:	d015      	beq.n	80029b6 <_svfiprintf_r+0xf6>
 800298a:	4654      	mov	r4, sl
 800298c:	2000      	movs	r0, #0
 800298e:	f04f 0c0a 	mov.w	ip, #10
 8002992:	9a07      	ldr	r2, [sp, #28]
 8002994:	4621      	mov	r1, r4
 8002996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800299a:	3b30      	subs	r3, #48	; 0x30
 800299c:	2b09      	cmp	r3, #9
 800299e:	d94e      	bls.n	8002a3e <_svfiprintf_r+0x17e>
 80029a0:	b1b0      	cbz	r0, 80029d0 <_svfiprintf_r+0x110>
 80029a2:	9207      	str	r2, [sp, #28]
 80029a4:	e014      	b.n	80029d0 <_svfiprintf_r+0x110>
 80029a6:	eba0 0308 	sub.w	r3, r0, r8
 80029aa:	fa09 f303 	lsl.w	r3, r9, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	46a2      	mov	sl, r4
 80029b2:	9304      	str	r3, [sp, #16]
 80029b4:	e7d2      	b.n	800295c <_svfiprintf_r+0x9c>
 80029b6:	9b03      	ldr	r3, [sp, #12]
 80029b8:	1d19      	adds	r1, r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	9103      	str	r1, [sp, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bfbb      	ittet	lt
 80029c2:	425b      	neglt	r3, r3
 80029c4:	f042 0202 	orrlt.w	r2, r2, #2
 80029c8:	9307      	strge	r3, [sp, #28]
 80029ca:	9307      	strlt	r3, [sp, #28]
 80029cc:	bfb8      	it	lt
 80029ce:	9204      	strlt	r2, [sp, #16]
 80029d0:	7823      	ldrb	r3, [r4, #0]
 80029d2:	2b2e      	cmp	r3, #46	; 0x2e
 80029d4:	d10c      	bne.n	80029f0 <_svfiprintf_r+0x130>
 80029d6:	7863      	ldrb	r3, [r4, #1]
 80029d8:	2b2a      	cmp	r3, #42	; 0x2a
 80029da:	d135      	bne.n	8002a48 <_svfiprintf_r+0x188>
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	3402      	adds	r4, #2
 80029e0:	1d1a      	adds	r2, r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	9203      	str	r2, [sp, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bfb8      	it	lt
 80029ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80029ee:	9305      	str	r3, [sp, #20]
 80029f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002ab0 <_svfiprintf_r+0x1f0>
 80029f4:	2203      	movs	r2, #3
 80029f6:	4650      	mov	r0, sl
 80029f8:	7821      	ldrb	r1, [r4, #0]
 80029fa:	f000 f9f7 	bl	8002dec <memchr>
 80029fe:	b140      	cbz	r0, 8002a12 <_svfiprintf_r+0x152>
 8002a00:	2340      	movs	r3, #64	; 0x40
 8002a02:	eba0 000a 	sub.w	r0, r0, sl
 8002a06:	fa03 f000 	lsl.w	r0, r3, r0
 8002a0a:	9b04      	ldr	r3, [sp, #16]
 8002a0c:	3401      	adds	r4, #1
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	9304      	str	r3, [sp, #16]
 8002a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a16:	2206      	movs	r2, #6
 8002a18:	4826      	ldr	r0, [pc, #152]	; (8002ab4 <_svfiprintf_r+0x1f4>)
 8002a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a1e:	f000 f9e5 	bl	8002dec <memchr>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d038      	beq.n	8002a98 <_svfiprintf_r+0x1d8>
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <_svfiprintf_r+0x1f8>)
 8002a28:	bb1b      	cbnz	r3, 8002a72 <_svfiprintf_r+0x1b2>
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	3307      	adds	r3, #7
 8002a2e:	f023 0307 	bic.w	r3, r3, #7
 8002a32:	3308      	adds	r3, #8
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a38:	4433      	add	r3, r6
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a3c:	e767      	b.n	800290e <_svfiprintf_r+0x4e>
 8002a3e:	460c      	mov	r4, r1
 8002a40:	2001      	movs	r0, #1
 8002a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a46:	e7a5      	b.n	8002994 <_svfiprintf_r+0xd4>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f04f 0c0a 	mov.w	ip, #10
 8002a4e:	4619      	mov	r1, r3
 8002a50:	3401      	adds	r4, #1
 8002a52:	9305      	str	r3, [sp, #20]
 8002a54:	4620      	mov	r0, r4
 8002a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a5a:	3a30      	subs	r2, #48	; 0x30
 8002a5c:	2a09      	cmp	r2, #9
 8002a5e:	d903      	bls.n	8002a68 <_svfiprintf_r+0x1a8>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0c5      	beq.n	80029f0 <_svfiprintf_r+0x130>
 8002a64:	9105      	str	r1, [sp, #20]
 8002a66:	e7c3      	b.n	80029f0 <_svfiprintf_r+0x130>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a70:	e7f0      	b.n	8002a54 <_svfiprintf_r+0x194>
 8002a72:	ab03      	add	r3, sp, #12
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	462a      	mov	r2, r5
 8002a78:	4638      	mov	r0, r7
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <_svfiprintf_r+0x1fc>)
 8002a7c:	a904      	add	r1, sp, #16
 8002a7e:	f3af 8000 	nop.w
 8002a82:	1c42      	adds	r2, r0, #1
 8002a84:	4606      	mov	r6, r0
 8002a86:	d1d6      	bne.n	8002a36 <_svfiprintf_r+0x176>
 8002a88:	89ab      	ldrh	r3, [r5, #12]
 8002a8a:	065b      	lsls	r3, r3, #25
 8002a8c:	f53f af2c 	bmi.w	80028e8 <_svfiprintf_r+0x28>
 8002a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a92:	b01d      	add	sp, #116	; 0x74
 8002a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a98:	ab03      	add	r3, sp, #12
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <_svfiprintf_r+0x1fc>)
 8002aa2:	a904      	add	r1, sp, #16
 8002aa4:	f000 f87c 	bl	8002ba0 <_printf_i>
 8002aa8:	e7eb      	b.n	8002a82 <_svfiprintf_r+0x1c2>
 8002aaa:	bf00      	nop
 8002aac:	08003110 	.word	0x08003110
 8002ab0:	08003116 	.word	0x08003116
 8002ab4:	0800311a 	.word	0x0800311a
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	08002809 	.word	0x08002809

08002ac0 <_printf_common>:
 8002ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac4:	4616      	mov	r6, r2
 8002ac6:	4699      	mov	r9, r3
 8002ac8:	688a      	ldr	r2, [r1, #8]
 8002aca:	690b      	ldr	r3, [r1, #16]
 8002acc:	4607      	mov	r7, r0
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	bfb8      	it	lt
 8002ad2:	4613      	movlt	r3, r2
 8002ad4:	6033      	str	r3, [r6, #0]
 8002ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ada:	460c      	mov	r4, r1
 8002adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ae0:	b10a      	cbz	r2, 8002ae6 <_printf_common+0x26>
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	6033      	str	r3, [r6, #0]
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	0699      	lsls	r1, r3, #26
 8002aea:	bf42      	ittt	mi
 8002aec:	6833      	ldrmi	r3, [r6, #0]
 8002aee:	3302      	addmi	r3, #2
 8002af0:	6033      	strmi	r3, [r6, #0]
 8002af2:	6825      	ldr	r5, [r4, #0]
 8002af4:	f015 0506 	ands.w	r5, r5, #6
 8002af8:	d106      	bne.n	8002b08 <_printf_common+0x48>
 8002afa:	f104 0a19 	add.w	sl, r4, #25
 8002afe:	68e3      	ldr	r3, [r4, #12]
 8002b00:	6832      	ldr	r2, [r6, #0]
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	42ab      	cmp	r3, r5
 8002b06:	dc28      	bgt.n	8002b5a <_printf_common+0x9a>
 8002b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b0c:	1e13      	subs	r3, r2, #0
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	bf18      	it	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	0692      	lsls	r2, r2, #26
 8002b16:	d42d      	bmi.n	8002b74 <_printf_common+0xb4>
 8002b18:	4649      	mov	r1, r9
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b20:	47c0      	blx	r8
 8002b22:	3001      	adds	r0, #1
 8002b24:	d020      	beq.n	8002b68 <_printf_common+0xa8>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	68e5      	ldr	r5, [r4, #12]
 8002b2a:	f003 0306 	and.w	r3, r3, #6
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf18      	it	ne
 8002b32:	2500      	movne	r5, #0
 8002b34:	6832      	ldr	r2, [r6, #0]
 8002b36:	f04f 0600 	mov.w	r6, #0
 8002b3a:	68a3      	ldr	r3, [r4, #8]
 8002b3c:	bf08      	it	eq
 8002b3e:	1aad      	subeq	r5, r5, r2
 8002b40:	6922      	ldr	r2, [r4, #16]
 8002b42:	bf08      	it	eq
 8002b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bfc4      	itt	gt
 8002b4c:	1a9b      	subgt	r3, r3, r2
 8002b4e:	18ed      	addgt	r5, r5, r3
 8002b50:	341a      	adds	r4, #26
 8002b52:	42b5      	cmp	r5, r6
 8002b54:	d11a      	bne.n	8002b8c <_printf_common+0xcc>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e008      	b.n	8002b6c <_printf_common+0xac>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4652      	mov	r2, sl
 8002b5e:	4649      	mov	r1, r9
 8002b60:	4638      	mov	r0, r7
 8002b62:	47c0      	blx	r8
 8002b64:	3001      	adds	r0, #1
 8002b66:	d103      	bne.n	8002b70 <_printf_common+0xb0>
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b70:	3501      	adds	r5, #1
 8002b72:	e7c4      	b.n	8002afe <_printf_common+0x3e>
 8002b74:	2030      	movs	r0, #48	; 0x30
 8002b76:	18e1      	adds	r1, r4, r3
 8002b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b82:	4422      	add	r2, r4
 8002b84:	3302      	adds	r3, #2
 8002b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b8a:	e7c5      	b.n	8002b18 <_printf_common+0x58>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4649      	mov	r1, r9
 8002b92:	4638      	mov	r0, r7
 8002b94:	47c0      	blx	r8
 8002b96:	3001      	adds	r0, #1
 8002b98:	d0e6      	beq.n	8002b68 <_printf_common+0xa8>
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7d9      	b.n	8002b52 <_printf_common+0x92>
	...

08002ba0 <_printf_i>:
 8002ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	7e0f      	ldrb	r7, [r1, #24]
 8002ba6:	4691      	mov	r9, r2
 8002ba8:	2f78      	cmp	r7, #120	; 0x78
 8002baa:	4680      	mov	r8, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	469a      	mov	sl, r3
 8002bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bb6:	d807      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bb8:	2f62      	cmp	r7, #98	; 0x62
 8002bba:	d80a      	bhi.n	8002bd2 <_printf_i+0x32>
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	f000 80d9 	beq.w	8002d74 <_printf_i+0x1d4>
 8002bc2:	2f58      	cmp	r7, #88	; 0x58
 8002bc4:	f000 80a4 	beq.w	8002d10 <_printf_i+0x170>
 8002bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bd0:	e03a      	b.n	8002c48 <_printf_i+0xa8>
 8002bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bd6:	2b15      	cmp	r3, #21
 8002bd8:	d8f6      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bda:	a101      	add	r1, pc, #4	; (adr r1, 8002be0 <_printf_i+0x40>)
 8002bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002be0:	08002c39 	.word	0x08002c39
 8002be4:	08002c4d 	.word	0x08002c4d
 8002be8:	08002bc9 	.word	0x08002bc9
 8002bec:	08002bc9 	.word	0x08002bc9
 8002bf0:	08002bc9 	.word	0x08002bc9
 8002bf4:	08002bc9 	.word	0x08002bc9
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002bc9 	.word	0x08002bc9
 8002c00:	08002bc9 	.word	0x08002bc9
 8002c04:	08002bc9 	.word	0x08002bc9
 8002c08:	08002bc9 	.word	0x08002bc9
 8002c0c:	08002d5b 	.word	0x08002d5b
 8002c10:	08002c7d 	.word	0x08002c7d
 8002c14:	08002d3d 	.word	0x08002d3d
 8002c18:	08002bc9 	.word	0x08002bc9
 8002c1c:	08002bc9 	.word	0x08002bc9
 8002c20:	08002d7d 	.word	0x08002d7d
 8002c24:	08002bc9 	.word	0x08002bc9
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002bc9 	.word	0x08002bc9
 8002c30:	08002bc9 	.word	0x08002bc9
 8002c34:	08002d45 	.word	0x08002d45
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	602a      	str	r2, [r5, #0]
 8002c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0a4      	b.n	8002d96 <_printf_i+0x1f6>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	6829      	ldr	r1, [r5, #0]
 8002c50:	0606      	lsls	r6, r0, #24
 8002c52:	f101 0304 	add.w	r3, r1, #4
 8002c56:	d50a      	bpl.n	8002c6e <_printf_i+0xce>
 8002c58:	680e      	ldr	r6, [r1, #0]
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	2e00      	cmp	r6, #0
 8002c5e:	da03      	bge.n	8002c68 <_printf_i+0xc8>
 8002c60:	232d      	movs	r3, #45	; 0x2d
 8002c62:	4276      	negs	r6, r6
 8002c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c68:	230a      	movs	r3, #10
 8002c6a:	485e      	ldr	r0, [pc, #376]	; (8002de4 <_printf_i+0x244>)
 8002c6c:	e019      	b.n	8002ca2 <_printf_i+0x102>
 8002c6e:	680e      	ldr	r6, [r1, #0]
 8002c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c74:	602b      	str	r3, [r5, #0]
 8002c76:	bf18      	it	ne
 8002c78:	b236      	sxthne	r6, r6
 8002c7a:	e7ef      	b.n	8002c5c <_printf_i+0xbc>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	6820      	ldr	r0, [r4, #0]
 8002c80:	1d19      	adds	r1, r3, #4
 8002c82:	6029      	str	r1, [r5, #0]
 8002c84:	0601      	lsls	r1, r0, #24
 8002c86:	d501      	bpl.n	8002c8c <_printf_i+0xec>
 8002c88:	681e      	ldr	r6, [r3, #0]
 8002c8a:	e002      	b.n	8002c92 <_printf_i+0xf2>
 8002c8c:	0646      	lsls	r6, r0, #25
 8002c8e:	d5fb      	bpl.n	8002c88 <_printf_i+0xe8>
 8002c90:	881e      	ldrh	r6, [r3, #0]
 8002c92:	2f6f      	cmp	r7, #111	; 0x6f
 8002c94:	bf0c      	ite	eq
 8002c96:	2308      	moveq	r3, #8
 8002c98:	230a      	movne	r3, #10
 8002c9a:	4852      	ldr	r0, [pc, #328]	; (8002de4 <_printf_i+0x244>)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ca2:	6865      	ldr	r5, [r4, #4]
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	bfa8      	it	ge
 8002ca8:	6821      	ldrge	r1, [r4, #0]
 8002caa:	60a5      	str	r5, [r4, #8]
 8002cac:	bfa4      	itt	ge
 8002cae:	f021 0104 	bicge.w	r1, r1, #4
 8002cb2:	6021      	strge	r1, [r4, #0]
 8002cb4:	b90e      	cbnz	r6, 8002cba <_printf_i+0x11a>
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	d04d      	beq.n	8002d56 <_printf_i+0x1b6>
 8002cba:	4615      	mov	r5, r2
 8002cbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cc0:	fb03 6711 	mls	r7, r3, r1, r6
 8002cc4:	5dc7      	ldrb	r7, [r0, r7]
 8002cc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cca:	4637      	mov	r7, r6
 8002ccc:	42bb      	cmp	r3, r7
 8002cce:	460e      	mov	r6, r1
 8002cd0:	d9f4      	bls.n	8002cbc <_printf_i+0x11c>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d10b      	bne.n	8002cee <_printf_i+0x14e>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	07de      	lsls	r6, r3, #31
 8002cda:	d508      	bpl.n	8002cee <_printf_i+0x14e>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	6861      	ldr	r1, [r4, #4]
 8002ce0:	4299      	cmp	r1, r3
 8002ce2:	bfde      	ittt	le
 8002ce4:	2330      	movle	r3, #48	; 0x30
 8002ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cee:	1b52      	subs	r2, r2, r5
 8002cf0:	6122      	str	r2, [r4, #16]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	f8cd a000 	str.w	sl, [sp]
 8002cfc:	aa03      	add	r2, sp, #12
 8002cfe:	f7ff fedf 	bl	8002ac0 <_printf_common>
 8002d02:	3001      	adds	r0, #1
 8002d04:	d14c      	bne.n	8002da0 <_printf_i+0x200>
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	b004      	add	sp, #16
 8002d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d10:	4834      	ldr	r0, [pc, #208]	; (8002de4 <_printf_i+0x244>)
 8002d12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d16:	6829      	ldr	r1, [r5, #0]
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d1e:	6029      	str	r1, [r5, #0]
 8002d20:	061d      	lsls	r5, r3, #24
 8002d22:	d514      	bpl.n	8002d4e <_printf_i+0x1ae>
 8002d24:	07df      	lsls	r7, r3, #31
 8002d26:	bf44      	itt	mi
 8002d28:	f043 0320 	orrmi.w	r3, r3, #32
 8002d2c:	6023      	strmi	r3, [r4, #0]
 8002d2e:	b91e      	cbnz	r6, 8002d38 <_printf_i+0x198>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	f023 0320 	bic.w	r3, r3, #32
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	2310      	movs	r3, #16
 8002d3a:	e7af      	b.n	8002c9c <_printf_i+0xfc>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	f043 0320 	orr.w	r3, r3, #32
 8002d42:	6023      	str	r3, [r4, #0]
 8002d44:	2378      	movs	r3, #120	; 0x78
 8002d46:	4828      	ldr	r0, [pc, #160]	; (8002de8 <_printf_i+0x248>)
 8002d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d4c:	e7e3      	b.n	8002d16 <_printf_i+0x176>
 8002d4e:	0659      	lsls	r1, r3, #25
 8002d50:	bf48      	it	mi
 8002d52:	b2b6      	uxthmi	r6, r6
 8002d54:	e7e6      	b.n	8002d24 <_printf_i+0x184>
 8002d56:	4615      	mov	r5, r2
 8002d58:	e7bb      	b.n	8002cd2 <_printf_i+0x132>
 8002d5a:	682b      	ldr	r3, [r5, #0]
 8002d5c:	6826      	ldr	r6, [r4, #0]
 8002d5e:	1d18      	adds	r0, r3, #4
 8002d60:	6961      	ldr	r1, [r4, #20]
 8002d62:	6028      	str	r0, [r5, #0]
 8002d64:	0635      	lsls	r5, r6, #24
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	d501      	bpl.n	8002d6e <_printf_i+0x1ce>
 8002d6a:	6019      	str	r1, [r3, #0]
 8002d6c:	e002      	b.n	8002d74 <_printf_i+0x1d4>
 8002d6e:	0670      	lsls	r0, r6, #25
 8002d70:	d5fb      	bpl.n	8002d6a <_printf_i+0x1ca>
 8002d72:	8019      	strh	r1, [r3, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	4615      	mov	r5, r2
 8002d78:	6123      	str	r3, [r4, #16]
 8002d7a:	e7ba      	b.n	8002cf2 <_printf_i+0x152>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	1d1a      	adds	r2, r3, #4
 8002d82:	602a      	str	r2, [r5, #0]
 8002d84:	681d      	ldr	r5, [r3, #0]
 8002d86:	6862      	ldr	r2, [r4, #4]
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f000 f82f 	bl	8002dec <memchr>
 8002d8e:	b108      	cbz	r0, 8002d94 <_printf_i+0x1f4>
 8002d90:	1b40      	subs	r0, r0, r5
 8002d92:	6060      	str	r0, [r4, #4]
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	6123      	str	r3, [r4, #16]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9e:	e7a8      	b.n	8002cf2 <_printf_i+0x152>
 8002da0:	462a      	mov	r2, r5
 8002da2:	4649      	mov	r1, r9
 8002da4:	4640      	mov	r0, r8
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	47d0      	blx	sl
 8002daa:	3001      	adds	r0, #1
 8002dac:	d0ab      	beq.n	8002d06 <_printf_i+0x166>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	079b      	lsls	r3, r3, #30
 8002db2:	d413      	bmi.n	8002ddc <_printf_i+0x23c>
 8002db4:	68e0      	ldr	r0, [r4, #12]
 8002db6:	9b03      	ldr	r3, [sp, #12]
 8002db8:	4298      	cmp	r0, r3
 8002dba:	bfb8      	it	lt
 8002dbc:	4618      	movlt	r0, r3
 8002dbe:	e7a4      	b.n	8002d0a <_printf_i+0x16a>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4632      	mov	r2, r6
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	47d0      	blx	sl
 8002dca:	3001      	adds	r0, #1
 8002dcc:	d09b      	beq.n	8002d06 <_printf_i+0x166>
 8002dce:	3501      	adds	r5, #1
 8002dd0:	68e3      	ldr	r3, [r4, #12]
 8002dd2:	9903      	ldr	r1, [sp, #12]
 8002dd4:	1a5b      	subs	r3, r3, r1
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	dcf2      	bgt.n	8002dc0 <_printf_i+0x220>
 8002dda:	e7eb      	b.n	8002db4 <_printf_i+0x214>
 8002ddc:	2500      	movs	r5, #0
 8002dde:	f104 0619 	add.w	r6, r4, #25
 8002de2:	e7f5      	b.n	8002dd0 <_printf_i+0x230>
 8002de4:	08003121 	.word	0x08003121
 8002de8:	08003132 	.word	0x08003132

08002dec <memchr>:
 8002dec:	4603      	mov	r3, r0
 8002dee:	b510      	push	{r4, lr}
 8002df0:	b2c9      	uxtb	r1, r1
 8002df2:	4402      	add	r2, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	d101      	bne.n	8002dfe <memchr+0x12>
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	e003      	b.n	8002e06 <memchr+0x1a>
 8002dfe:	7804      	ldrb	r4, [r0, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	428c      	cmp	r4, r1
 8002e04:	d1f6      	bne.n	8002df4 <memchr+0x8>
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <memcpy>:
 8002e08:	440a      	add	r2, r1
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e10:	d100      	bne.n	8002e14 <memcpy+0xc>
 8002e12:	4770      	bx	lr
 8002e14:	b510      	push	{r4, lr}
 8002e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e1a:	4291      	cmp	r1, r2
 8002e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e20:	d1f9      	bne.n	8002e16 <memcpy+0xe>
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <memmove>:
 8002e24:	4288      	cmp	r0, r1
 8002e26:	b510      	push	{r4, lr}
 8002e28:	eb01 0402 	add.w	r4, r1, r2
 8002e2c:	d902      	bls.n	8002e34 <memmove+0x10>
 8002e2e:	4284      	cmp	r4, r0
 8002e30:	4623      	mov	r3, r4
 8002e32:	d807      	bhi.n	8002e44 <memmove+0x20>
 8002e34:	1e43      	subs	r3, r0, #1
 8002e36:	42a1      	cmp	r1, r4
 8002e38:	d008      	beq.n	8002e4c <memmove+0x28>
 8002e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e42:	e7f8      	b.n	8002e36 <memmove+0x12>
 8002e44:	4601      	mov	r1, r0
 8002e46:	4402      	add	r2, r0
 8002e48:	428a      	cmp	r2, r1
 8002e4a:	d100      	bne.n	8002e4e <memmove+0x2a>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e56:	e7f7      	b.n	8002e48 <memmove+0x24>

08002e58 <_free_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	d040      	beq.n	8002ee2 <_free_r+0x8a>
 8002e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e64:	1f0c      	subs	r4, r1, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfb8      	it	lt
 8002e6a:	18e4      	addlt	r4, r4, r3
 8002e6c:	f000 f910 	bl	8003090 <__malloc_lock>
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <_free_r+0x8c>)
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	b933      	cbnz	r3, 8002e84 <_free_r+0x2c>
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	6014      	str	r4, [r2, #0]
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e80:	f000 b90c 	b.w	800309c <__malloc_unlock>
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	d908      	bls.n	8002e9a <_free_r+0x42>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	1821      	adds	r1, r4, r0
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf01      	itttt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	1809      	addeq	r1, r1, r0
 8002e96:	6021      	streq	r1, [r4, #0]
 8002e98:	e7ed      	b.n	8002e76 <_free_r+0x1e>
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b10b      	cbz	r3, 8002ea4 <_free_r+0x4c>
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d9fa      	bls.n	8002e9a <_free_r+0x42>
 8002ea4:	6811      	ldr	r1, [r2, #0]
 8002ea6:	1850      	adds	r0, r2, r1
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d10b      	bne.n	8002ec4 <_free_r+0x6c>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	4401      	add	r1, r0
 8002eb0:	1850      	adds	r0, r2, r1
 8002eb2:	4283      	cmp	r3, r0
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	d1e0      	bne.n	8002e7a <_free_r+0x22>
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4401      	add	r1, r0
 8002ebe:	6011      	str	r1, [r2, #0]
 8002ec0:	6053      	str	r3, [r2, #4]
 8002ec2:	e7da      	b.n	8002e7a <_free_r+0x22>
 8002ec4:	d902      	bls.n	8002ecc <_free_r+0x74>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	e7d6      	b.n	8002e7a <_free_r+0x22>
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	1821      	adds	r1, r4, r0
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	bf01      	itttt	eq
 8002ed4:	6819      	ldreq	r1, [r3, #0]
 8002ed6:	685b      	ldreq	r3, [r3, #4]
 8002ed8:	1809      	addeq	r1, r1, r0
 8002eda:	6021      	streq	r1, [r4, #0]
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	6054      	str	r4, [r2, #4]
 8002ee0:	e7cb      	b.n	8002e7a <_free_r+0x22>
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000144 	.word	0x20000144

08002ee8 <sbrk_aligned>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4e0e      	ldr	r6, [pc, #56]	; (8002f24 <sbrk_aligned+0x3c>)
 8002eec:	460c      	mov	r4, r1
 8002eee:	6831      	ldr	r1, [r6, #0]
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b911      	cbnz	r1, 8002efa <sbrk_aligned+0x12>
 8002ef4:	f000 f8bc 	bl	8003070 <_sbrk_r>
 8002ef8:	6030      	str	r0, [r6, #0]
 8002efa:	4621      	mov	r1, r4
 8002efc:	4628      	mov	r0, r5
 8002efe:	f000 f8b7 	bl	8003070 <_sbrk_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d00a      	beq.n	8002f1c <sbrk_aligned+0x34>
 8002f06:	1cc4      	adds	r4, r0, #3
 8002f08:	f024 0403 	bic.w	r4, r4, #3
 8002f0c:	42a0      	cmp	r0, r4
 8002f0e:	d007      	beq.n	8002f20 <sbrk_aligned+0x38>
 8002f10:	1a21      	subs	r1, r4, r0
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 f8ac 	bl	8003070 <_sbrk_r>
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d101      	bne.n	8002f20 <sbrk_aligned+0x38>
 8002f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f20:	4620      	mov	r0, r4
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	20000148 	.word	0x20000148

08002f28 <_malloc_r>:
 8002f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2c:	1ccd      	adds	r5, r1, #3
 8002f2e:	f025 0503 	bic.w	r5, r5, #3
 8002f32:	3508      	adds	r5, #8
 8002f34:	2d0c      	cmp	r5, #12
 8002f36:	bf38      	it	cc
 8002f38:	250c      	movcc	r5, #12
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	db01      	blt.n	8002f44 <_malloc_r+0x1c>
 8002f40:	42a9      	cmp	r1, r5
 8002f42:	d905      	bls.n	8002f50 <_malloc_r+0x28>
 8002f44:	230c      	movs	r3, #12
 8002f46:	2600      	movs	r6, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f50:	4e2e      	ldr	r6, [pc, #184]	; (800300c <_malloc_r+0xe4>)
 8002f52:	f000 f89d 	bl	8003090 <__malloc_lock>
 8002f56:	6833      	ldr	r3, [r6, #0]
 8002f58:	461c      	mov	r4, r3
 8002f5a:	bb34      	cbnz	r4, 8002faa <_malloc_r+0x82>
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	4638      	mov	r0, r7
 8002f60:	f7ff ffc2 	bl	8002ee8 <sbrk_aligned>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	4604      	mov	r4, r0
 8002f68:	d14d      	bne.n	8003006 <_malloc_r+0xde>
 8002f6a:	6834      	ldr	r4, [r6, #0]
 8002f6c:	4626      	mov	r6, r4
 8002f6e:	2e00      	cmp	r6, #0
 8002f70:	d140      	bne.n	8002ff4 <_malloc_r+0xcc>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	4631      	mov	r1, r6
 8002f76:	4638      	mov	r0, r7
 8002f78:	eb04 0803 	add.w	r8, r4, r3
 8002f7c:	f000 f878 	bl	8003070 <_sbrk_r>
 8002f80:	4580      	cmp	r8, r0
 8002f82:	d13a      	bne.n	8002ffa <_malloc_r+0xd2>
 8002f84:	6821      	ldr	r1, [r4, #0]
 8002f86:	3503      	adds	r5, #3
 8002f88:	1a6d      	subs	r5, r5, r1
 8002f8a:	f025 0503 	bic.w	r5, r5, #3
 8002f8e:	3508      	adds	r5, #8
 8002f90:	2d0c      	cmp	r5, #12
 8002f92:	bf38      	it	cc
 8002f94:	250c      	movcc	r5, #12
 8002f96:	4638      	mov	r0, r7
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f7ff ffa5 	bl	8002ee8 <sbrk_aligned>
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d02b      	beq.n	8002ffa <_malloc_r+0xd2>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	442b      	add	r3, r5
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	e00e      	b.n	8002fc8 <_malloc_r+0xa0>
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	1b52      	subs	r2, r2, r5
 8002fae:	d41e      	bmi.n	8002fee <_malloc_r+0xc6>
 8002fb0:	2a0b      	cmp	r2, #11
 8002fb2:	d916      	bls.n	8002fe2 <_malloc_r+0xba>
 8002fb4:	1961      	adds	r1, r4, r5
 8002fb6:	42a3      	cmp	r3, r4
 8002fb8:	6025      	str	r5, [r4, #0]
 8002fba:	bf18      	it	ne
 8002fbc:	6059      	strne	r1, [r3, #4]
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	bf08      	it	eq
 8002fc2:	6031      	streq	r1, [r6, #0]
 8002fc4:	5162      	str	r2, [r4, r5]
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	4638      	mov	r0, r7
 8002fca:	f104 060b 	add.w	r6, r4, #11
 8002fce:	f000 f865 	bl	800309c <__malloc_unlock>
 8002fd2:	f026 0607 	bic.w	r6, r6, #7
 8002fd6:	1d23      	adds	r3, r4, #4
 8002fd8:	1af2      	subs	r2, r6, r3
 8002fda:	d0b6      	beq.n	8002f4a <_malloc_r+0x22>
 8002fdc:	1b9b      	subs	r3, r3, r6
 8002fde:	50a3      	str	r3, [r4, r2]
 8002fe0:	e7b3      	b.n	8002f4a <_malloc_r+0x22>
 8002fe2:	6862      	ldr	r2, [r4, #4]
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	bf0c      	ite	eq
 8002fe8:	6032      	streq	r2, [r6, #0]
 8002fea:	605a      	strne	r2, [r3, #4]
 8002fec:	e7ec      	b.n	8002fc8 <_malloc_r+0xa0>
 8002fee:	4623      	mov	r3, r4
 8002ff0:	6864      	ldr	r4, [r4, #4]
 8002ff2:	e7b2      	b.n	8002f5a <_malloc_r+0x32>
 8002ff4:	4634      	mov	r4, r6
 8002ff6:	6876      	ldr	r6, [r6, #4]
 8002ff8:	e7b9      	b.n	8002f6e <_malloc_r+0x46>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	f000 f84c 	bl	800309c <__malloc_unlock>
 8003004:	e7a1      	b.n	8002f4a <_malloc_r+0x22>
 8003006:	6025      	str	r5, [r4, #0]
 8003008:	e7de      	b.n	8002fc8 <_malloc_r+0xa0>
 800300a:	bf00      	nop
 800300c:	20000144 	.word	0x20000144

08003010 <_realloc_r>:
 8003010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003014:	4680      	mov	r8, r0
 8003016:	4614      	mov	r4, r2
 8003018:	460e      	mov	r6, r1
 800301a:	b921      	cbnz	r1, 8003026 <_realloc_r+0x16>
 800301c:	4611      	mov	r1, r2
 800301e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	f7ff bf81 	b.w	8002f28 <_malloc_r>
 8003026:	b92a      	cbnz	r2, 8003034 <_realloc_r+0x24>
 8003028:	f7ff ff16 	bl	8002e58 <_free_r>
 800302c:	4625      	mov	r5, r4
 800302e:	4628      	mov	r0, r5
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003034:	f000 f838 	bl	80030a8 <_malloc_usable_size_r>
 8003038:	4284      	cmp	r4, r0
 800303a:	4607      	mov	r7, r0
 800303c:	d802      	bhi.n	8003044 <_realloc_r+0x34>
 800303e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003042:	d812      	bhi.n	800306a <_realloc_r+0x5a>
 8003044:	4621      	mov	r1, r4
 8003046:	4640      	mov	r0, r8
 8003048:	f7ff ff6e 	bl	8002f28 <_malloc_r>
 800304c:	4605      	mov	r5, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d0ed      	beq.n	800302e <_realloc_r+0x1e>
 8003052:	42bc      	cmp	r4, r7
 8003054:	4622      	mov	r2, r4
 8003056:	4631      	mov	r1, r6
 8003058:	bf28      	it	cs
 800305a:	463a      	movcs	r2, r7
 800305c:	f7ff fed4 	bl	8002e08 <memcpy>
 8003060:	4631      	mov	r1, r6
 8003062:	4640      	mov	r0, r8
 8003064:	f7ff fef8 	bl	8002e58 <_free_r>
 8003068:	e7e1      	b.n	800302e <_realloc_r+0x1e>
 800306a:	4635      	mov	r5, r6
 800306c:	e7df      	b.n	800302e <_realloc_r+0x1e>
	...

08003070 <_sbrk_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	2300      	movs	r3, #0
 8003074:	4d05      	ldr	r5, [pc, #20]	; (800308c <_sbrk_r+0x1c>)
 8003076:	4604      	mov	r4, r0
 8003078:	4608      	mov	r0, r1
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	f7fd f9e6 	bl	800044c <_sbrk>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_sbrk_r+0x1a>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b103      	cbz	r3, 800308a <_sbrk_r+0x1a>
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	2000014c 	.word	0x2000014c

08003090 <__malloc_lock>:
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <__malloc_lock+0x8>)
 8003092:	f000 b811 	b.w	80030b8 <__retarget_lock_acquire_recursive>
 8003096:	bf00      	nop
 8003098:	20000150 	.word	0x20000150

0800309c <__malloc_unlock>:
 800309c:	4801      	ldr	r0, [pc, #4]	; (80030a4 <__malloc_unlock+0x8>)
 800309e:	f000 b80c 	b.w	80030ba <__retarget_lock_release_recursive>
 80030a2:	bf00      	nop
 80030a4:	20000150 	.word	0x20000150

080030a8 <_malloc_usable_size_r>:
 80030a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ac:	1f18      	subs	r0, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfbc      	itt	lt
 80030b2:	580b      	ldrlt	r3, [r1, r0]
 80030b4:	18c0      	addlt	r0, r0, r3
 80030b6:	4770      	bx	lr

080030b8 <__retarget_lock_acquire_recursive>:
 80030b8:	4770      	bx	lr

080030ba <__retarget_lock_release_recursive>:
 80030ba:	4770      	bx	lr

080030bc <_init>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

080030c8 <_fini>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr
